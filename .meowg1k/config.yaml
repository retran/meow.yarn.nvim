# MIT License
#
# Copyright (c) 2025 Andrew Vasilyev <me@retran.me>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.
#
# @file: .meowg1k/config.yaml
# @brief: Configuration file for meowg1k AI code generation tool.
# @author: Andrew Vasilyev
# @license: MIT
#
---
profiles:
  fast:
    provider: "gemini"
    model: "gemini-2.5-flash"

  smart:
    provider: "gemini"
    model: "gemini-2.5-pro"
    timeout: "10m"

generate:
  default:
    profile: "fast"
    systemPrompt: >-
      You are a Neovim plugin development expert and senior Lua developer.
      You specialize in creating modern, high-quality Neovim plugins following current best practices.
      You are familiar with Neovim 0.10+ APIs, LuaCATS annotations, proper lazy loading patterns,
      semantic versioning, and the modern Lua ecosystem including LuaRocks and busted testing.
      You prioritize type safety, user experience, proper API design, and maintainable architecture.
      Always follow the nvim-best-practices guidelines for modern plugin development.

  tasks:
    review:
      profile: "smart"
      userPrompt: >-
        Perform a comprehensive code review of the following Neovim plugin code following nvim-best-practices guidelines.

        Focus areas:
          - Type Safety: LuaCATS annotations, lua-language-server compatibility, nil handling
          - API Design: Proper use of Neovim 0.10+ APIs, avoiding deprecated functions
          - Lazy Loading: Efficient module loading, minimal startup impact, proper require patterns
          - Configuration: Separation of config declaration and internal values, validation with vim.validate
          - User Experience: <Plug> mappings over setup() keymaps, scoped commands with completions
          - Architecture: Modular design, proper separation of concerns, extensibility
          - Error Handling: Graceful degradation, user-friendly error messages, pcall usage
          - Documentation: Complete EmmyLua annotations, clear function documentation
          - Testing: Testable design, busted-compatible structure, mock-friendly interfaces
          - Compatibility: Lua 5.1 API compliance, avoiding LuaJIT extensions

        Output format:
          1) Summary — key strengths and areas for improvement
          2) Critical Issues — bugs, API misuse, breaking changes needed
          3) Best Practices — adherence to nvim-best-practices guidelines
          4) Type Safety — LuaCATS and type checking recommendations
          5) Performance — lazy loading and startup optimization suggestions

    commit:
      profile: "smart"
      userPrompt: >-
        Generate a Conventional Commit message for the provided changes to a Neovim plugin.

        Rules:
          - Use one of: feat, fix, refactor, style, docs, chore, perf, test.
          - Subject: imperative, ≤72 chars, no trailing period.
          - Scope examples: (ui), (lsp), (hierarchy), (config), (api), (commands), (keymaps).
          - Consider plugin-specific scopes like (type-hierarchy), (call-hierarchy).

        Output format:
          - Single-line header with type(scope): description
          - Optional body explaining motivation and impact
          - Optional footers for breaking changes or issue references

    doc:
      profile: "fast"
      userPrompt: >-
        Write comprehensive LuaCATS documentation for the following Neovim plugin code,
        following nvim-best-practices guidelines.

        Requirements:
          - Complete LuaCATS annotations (@class, @field, @param, @return, @see)
          - @mod annotations for modules with clear descriptions
          - Detailed function documentation explaining purpose, behavior, and side effects
          - @param annotations with precise types, optionality markers (?), and descriptions
          - @return annotations for all return values with union types where applicable
          - @usage examples for public API functions showing realistic scenarios
          - @see references to related functions and Neovim help topics
          - Note any Neovim commands, autocommands, or highlight groups created
          - Document configuration schema with @class for user-facing config
          - Separate internal config types from user config types for type safety
          - Include @deprecated annotations for deprecated functionality

        Prioritize:
          - Type safety with precise type definitions
          - User-friendly documentation that helps with IDE completion
          - Clear examples that demonstrate real-world usage
          - Proper distinction between public API and internal functions

        Output only the documentation block, not the implementation code.

    refactor:
      profile: "smart"
      userPrompt: >-
        Refactor the following Neovim plugin code to follow modern nvim-best-practices guidelines
        while preserving all functionality.

        Apply these principles:
          - Type Safety: Add comprehensive LuaCATS annotations, handle nil values properly
          - Modern APIs: Use Neovim 0.10+ APIs, avoid deprecated vim.cmd when vim.api alternatives exist
          - Lazy Loading: Implement proper require patterns, minimize startup impact
          - Configuration: Separate user config types from internal config, use vim.validate for validation
          - User Interface: Replace setup() keymaps with <Plug> mappings, implement scoped commands
          - Error Handling: Use pcall/xpcall appropriately, provide user-friendly error messages
          - Architecture: Improve modularity, reduce coupling, enhance extensibility
          - Performance: Optimize for minimal startup time, efficient algorithms
          - Compatibility: Ensure Lua 5.1 compliance, avoid LuaJIT-specific features
          - Documentation: Add complete function documentation with examples

        Output:
          1) Refactored code with comprehensive improvements
          2) Migration guide explaining any API changes
          3) Summary of key improvements and their benefits
          4) Performance and type safety enhancements made

        Focus on making the code more maintainable, type-safe, and user-friendly.

    feature:
      profile: "smart"
      userPrompt: >-
        Implement the requested feature for this Neovim plugin following nvim-best-practices guidelines.

        Design principles:
          - Type Safety: Use comprehensive LuaCATS annotations and proper nil handling
          - API Design: Provide <Plug> mappings instead of setup() keymaps, use scoped commands
          - Lazy Loading: Implement efficient require patterns, minimal startup impact
          - Configuration: Separate user config from internal config, validate with vim.validate
          - Modern APIs: Use Neovim 0.10+ APIs, avoid deprecated functions
          - Error Handling: Graceful degradation with user-friendly error messages
          - Architecture: Follow existing patterns, maintain modularity and extensibility
          - Documentation: Complete LuaCATS annotations with usage examples
          - Testing: Design for testability with clear interfaces and dependency injection
          - Compatibility: Ensure Lua 5.1 compliance, avoid LuaJIT extensions

        Implementation requirements:
          - Follow existing code patterns and architecture
          - Maintain backward compatibility where possible
          - Include comprehensive error handling and edge cases
          - Add health checks for new functionality
          - Provide user commands with proper completions
          - Consider integration with other plugins

        Output:
          1) Complete feature implementation with full documentation
          2) Integration points (commands, <Plug> mappings, configuration options)
          3) Health check additions for the new feature
          4) Testing strategy and suggested test cases
          5) Documentation updates needed for vimdoc

    test:
      profile: "fast"
      userPrompt: >-
        Create a comprehensive test suite for the provided Neovim plugin code using busted framework,
        following nvim-best-practices testing guidelines.

        Requirements:
          - Use busted framework (NOT plenary.nvim) for modern Lua testing
          - Implement proper test structure with describe/it blocks
          - Test both success paths and error conditions thoroughly
          - Mock external dependencies (LSP clients, file system, vim APIs)
          - Use luassert for powerful assertions and custom matchers
          - Test configuration validation and edge cases
          - Include integration tests for complete user workflows
          - Test lazy loading behavior and module boundaries
          - Validate type safety and nil handling
          - Test plugin initialization and cleanup

        Structure:
          - Setup/teardown functions for test isolation
          - Mock strategies for vim APIs and external dependencies
          - Test data factories and fixtures
          - Helper functions for common test scenarios
          - Both unit tests (individual functions) and integration tests (full workflows)

        Output:
          1) Complete busted test suite with proper organization
          2) Mock implementations for external dependencies
          3) Test configuration and setup instructions
          4) Coverage analysis suggestions

    pr:
      profile: "smart"
      userPrompt: >-
        Create a comprehensive Pull Request description for the provided diff in a Neovim plugin project.

        Template sections:
          - Summary of changes and motivation
          - Features added/modified/removed
          - Breaking changes (if any)
          - Testing performed
          - Documentation updates
          - Migration guide (if needed)

        Use appropriate labels: type/(feat|fix|refactor), area/(ui|lsp|config|docs), priority/(high|medium|low)

filter:
  ignore:
    - "**/*.lock"
    - "go.sum"
    - "dist/**"
    - "bin/**"
    - ".git/**"

summarize:
  default:
    profile: "fast"
    strategy:
      type: "plaintext"
      includeFullFile: false
    systemPrompt: "Briefly describe the main change in the following input."
  rules:
    - match: "*.lua"
      profile: "smart"
      strategy:
        type: "plaintext"
        includeFullFile: true
      systemPrompt: "Describe the changes in the following Lua code."
    - match: "LICENSE"
      skip: true
    - match: "*.md"
      profile: "fast"
      strategy:
        type: "plaintext"
        includeFullFile: false
      systemPrompt: "Summarize the documentation changes."

commit:
  profile: "smart"
  systemPrompt: |
    You are an expert software engineer specializing in Neovim plugins.
    Write a commit message in the Conventional Commits format based on the user's input.

pr:
  profile: "smart"
  systemPrompt: |
    You are an AI assistant writing a Pull Request description for a Neovim plugin.
    Based on the user's input, write a clear and detailed PR description.